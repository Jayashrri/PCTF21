from Crypto.Util.number import inverse, bytes_to_long, long_to_bytes, GCD
from pwn import *
#ct = 3538852156677110900056308852204253391548885723356774068588896101938715958445807402311084680116353987577540550712675915650434923336753875837404145247959985791107881185248736486381255292924337573574666307217003198514702584822162059709855122715035309927152734740708781552368504387529714932006280320278171987189133021500787255377072672825989608081244578027147567598487005159362562751704446654535939917331627858463707095429992500662466305059059707453004185286071182990805431289657509932947659872582838528459420440316035600042717159983411473439736764828770817112008344436342232764388763736119845112504640384785476187564538
#e = 35152079
#n = 22102610357758098444471832990611775640187114194163693683258769545322328706679090544809109503693554626619388732432830757054153338184105512841839814918961889742551116423604706867538000851213606502450461423270485549592161745150282667698352436558843434408423174655765049298545583994952917456990362577553090163779567253787750581922908712781177046073162012652866264512542021729094523321991300776222633842152750901434180513646231308028053890142953496676723789612762815451703856230514600550104096855751237022422499758107966510144447080253848392332964141647088132733589059654516293453051891327788027521877933112623657994777273
## choose any random number 3,4,5,6,......
#altered_ct = (ct * pow(3, e, n)) % n
#print(altered_ct)
#
#
## uncomment and enter the cipher text the safe could not understand
#message = b'\xf9\xcf\xc9\xf6\xcf\xfdr3D\x9d6\x1e2\x91W\x1e`Y\x9aW\x1d\x94-\x1d\xa5\xa8\xab\xa8\xab\x91w'
#message = bytes_to_long(message)
#ect = message//3
#print(long_to_bytes(ect))
#
#
#id_pt = b"SECRET{789890}"
#id_ct = pow(bytes_to_long(id_pt), e, n)
#print(id_ct)
#'''
#new_e = 1080827
#new_n = 22816166456632538341414764366143085422853152821672845041588055131528936734994638261439154862445111665076038971853824354394924036554900033493161518143324217711040591518589369542125709777956265868547378367336258024913902791689933204815086557239381298743727003857661117612041980319347461227320781375535677771189024078187865536653385840445659151034430008309692764691561429254926345341798830649943855756261324150283869241450366154207267409223423899197586972067186139574465834157848552873407559663452829601274968618866463703489538900192812576581188669385793810901494387626944313476418388068877144476115199043218402668782619
#q = GCD(new_n, n)
#
#p = new_n//q
#t = (p-1)*(q-1)
#
#d = inverse(new_e, t)
#
#
#FLAG = 144134547381488567987648853162047969502501178195218918044154850407005160759330823232379795301847428811919600799080924998434743538179428671164389258525072137771401833176148259616534849312682667679197480858438143479063581923961278282974875663687879332676741189747080063607383983579815540522001549248973452531525243403767118446485762920685810050573446332401488607517349258504554639244424374011550715464617312308691431937714469335718316681085737496679286134612843706872654460243640049179076264676366163756572425830029943175713184587481811846773421647687517670762459779855006682353764499192472272984333102886599160301146
#pt = pow(FLAG, d, new_n)
#print(long_to_bytes(pt))
#'''

def _encrypt(message):
    r.recvuntil("choice: ")
    r.sendline("1")
    r.recvuntil("to encrypt (in hex): ")
    r.sendline(message.encode("hex"))
    ct = r.recvline("ciphertext (in hex): ").strip()[37:]
    r.recvline()
    r.recvline()
    return ct.decode("hex")

def _decrypt(ciphertext):
    r.recvuntil("choice: ")
    r.sendline("2")
    r.recvuntil("to decrypt (in hex): ")
    r.sendline(ciphertext.encode("hex"))
    pt = r.recvline("plaintext (in hex): ").strip()[36:]
    r.recvline()
    r.recvline()
    return pt.decode("hex")

r = process("./question.py")
r.recvline()
print(r)

