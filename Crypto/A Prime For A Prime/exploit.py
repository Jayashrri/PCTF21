import random
from binascii import *
import base64
s1 = "JdTlUzWk"
s2 = "HaOeHiDL"

# Actual primes would be Mersenne primes i.e
exp_list = [2, 3, 5, 7, 13, 17, 19, 31]
primes = [(pow(2,i)-1) for i in exp_list] # primes = [3, 7, 31, 127, 8191, 131071, 524287, 2147483647]

seed_value = f"{primes[0]^primes[1]}~{primes[2]^primes[3]}~{primes[4]^primes[5]}~{primes[6]^primes[7]}"
flag = "pctf{1t5_n0t_4lw4y5_4_r4nd0m_ch01c3}"
random.seed(seed_value)
random_values = [] # [1, 2, 1, 1, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1, 1, 2, 2, 2]

for i in range(36):
	random_values.append(random.randint(1,2))
print(random_values)

flag_cipher= "725f76657b3177355e6d33745e346e743779355b365b71346d64336a5f606b2f315f327d"
flag_cipher = unhexlify(flag_cipher).decode()
print(flag_cipher)
flag_decipher = ""
for i in range(36):
	if (i & 1):
		flag_decipher += chr(((ord(flag_cipher[i]) + 2) ^ random_values[i]))
	else:
		flag_decipher += chr(((ord(flag_cipher[i]) - 1)^ random_values[i]))
print(flag_decipher)


