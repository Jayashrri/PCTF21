import random
import miller_rabin
from Crypto.Util.number import getPrime, inverse, bytes_to_long, long_to_bytes, GCD
from Crypto.Util import number


def getPrimePair(bits=512):
    assert bits % 4 == 0

    p = getPrime(512)
    q = getPrime(512)
    while True:
        if (q > p and q < 2*p):
            break

    return p, q


def generateKeys(nbits=1024):
    assert nbits % 4 == 0

    p = getPrime(512)
    q = getPrime(512)
    while True:
        if (q > p and q < 2*p):
            break
    print("p: ", p)
    print("q: ", q)
    n = p*q
    phi = (p-1)*(q-1)

    # generate a d such that:
    #     (d,n) = 1
    #    36d^4 < n
    good_d = False
    while not good_d:
        d = random.getrandbits(nbits//4)
        if (GCD(d, phi) == 1 and 36*pow(d, 4) < n):
            good_d = True

    e = inverse(d, phi)
    return e, n, d


for i in range(5):
    e, n, d = generateKeys()
    print("-----------------------")
    print("e =")
    print(e)
    print("n =")
    print(n)
    print("d =")
    print(d)
    print("-----------------------")
'''
p:  7741802571627804067643079435971705454932085324064804053047353233571989180168237446929476055773926029266390047355726546521886340201835336551763899701718843
q:  8541662763621578262802241785790215140214888552862384547335041988547799156859997033538506709398573681915711594411575078990064698979552749275869317435332019
-----------------------
e =
49021223420824032294575444337842664303659750592143989444346054309603440492775268654740750646154577199983231748104696333989408685866260184512430700588674016904760325272678306950185297232076982110968115039955042262569727950472571690980754170956553663654235748865752528926561864131231922710204977192321137288399
n =
66127866749382990493477163276430644453647695624334995188086456100669920148213670269845759053423673254332402160627157685339145491308779705315762969363954774452825663551444659323949452355916378323030776609439650018934209821520482796767784390070995410394768644427915964279983737069473408342964412902992693534017
d =
1321002892130907363304772307533938730810765133568799587587377646493338204703
'''
